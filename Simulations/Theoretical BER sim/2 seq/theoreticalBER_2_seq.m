N=2; %%number of symbols within a sequenceBER=zeros(15,1); %%bit error rate for awgn channel%%--------------------------------------sequences=zeros(9, 3);sequences(1,:)=[0, 0, 0];sequences(2,:)=[0, 0, 1];sequences(3,:)=[0, 1, 1];sequences(4,:)=[0, 1, 0];sequences(5,:)=[1, 1, 0];sequences(6,:)=[1, 1, 1];sequences(7,:)=[1, 0, 1];sequences(8,:)=[1, 0, 0];sequences(9,:)=[1, 0, 0];%disp(sequences)%disp(0)rgb_sequences=zeros(9,2);rgb_sequences(1,:)=[2, 0];rgb_sequences(2,:)=[2, 1];rgb_sequences(3,:)=[2, 2];rgb_sequences(4,:)=[1, 2];rgb_sequences(5,:)=[1, 0];rgb_sequences(6,:)=[1, 1];rgb_sequences(7,:)=[0, 1];rgb_sequences(8,:)=[0, 2];rgb_sequences(9,:)=[0, 0];%disp(rgb_sequences)%disp(0)hamming_distances=zeros(9,9); %calculate hamming distances between sequencesdist=0;for i=1:1:9  for j=1:1:9    if(sequences(i,1)~=sequences(j,1))        dist=dist+1;    end    if(sequences(i,2)~=sequences(j,2))        dist=dist+1;    end    if(sequences(i,3)~=sequences(j,3))        dist=dist+1;    end    hamming_distances(i, j)=dist;    dist=0;  endenddisp(hamming_distances)disp(0)%%---------------------------------------------------G = zeros(15, 1);for SNR = 1:15    SNR_lin= 10^(SNR/10);    fun = @(x)exp(-(0.8*(4*SNR_lin/3)*(sin(pi/3)).^2)./(sin(abs(x-pi/6)+pi/3)).^2) ;    q = integral(fun,pi/6,-pi/2);    q = abs(q/(2*pi));    G(SNR)=q;end%%---------------------------------------------------term=0;p_seq=1;for b=1:1:15  for i=1:1:(2^floor(log2(3^N)))    for j=1:1:3^N      if(j~=i)        for r=1:1:N          if(rgb_sequences(i, r)==rgb_sequences(j, r))            p_seq=p_seq*(1-2*G(b));          else            p_seq=p_seq*G(b);          end                 end      end            term=term+(hamming_distances(i, j)*p_seq);      p_seq=1;           end  end  BER(b)=term;  term=0;endBER=BER/(floor(log2(3^N))); BER=BER/8; %divide by P(seq_{i})semilogy([1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15], BER)